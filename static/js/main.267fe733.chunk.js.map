{"version":3,"sources":["yay.mp3","mykonami.js","App.js","serviceWorker.js","index.js","img.svg"],"names":["module","exports","width","window","innerWidth","height","innerHeight","MyKonami","props","easterEgg","setState","yaystatus","Sound","status","PLAYING","state","STOP","action","this","url","yay","playStatus","playFromPosition","href","React","App","className","src","logo","alt","target","rel","style","fontSize","title","Alt","border","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,2RCOrCC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAkCPC,E,kDA/Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,UAAY,WACV,EAAKC,SACH,CAAEC,UAAUC,IAAMC,OAAOC,WAP3B,EAAKC,MAAQ,CACXJ,UAAUC,IAAMC,OAAOG,MAHR,E,qDAcjB,OACE,gBAAC,IAAD,CAAQC,OAAQC,KAAKT,WACnB,gBAAC,IAAD,CACEU,IAAKC,IACLC,WAAYH,KAAKH,MAAMJ,UACvBW,iBAAkB,MAEpB,gBAAC,IAAD,CACEpB,MAAOA,EACPG,OAAQA,IAEV,qBAAGkB,KAAK,8CAAR,4B,GA1BeC,a,mDC6CRC,MA/Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,YAAf,sBAGA,yBAAKA,UAAU,UAAf,mCAGA,4BACA,yBAAKA,UAAU,SACf,uBACEA,UAAU,WACVH,KAAK,4BACLO,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAYC,MAAO,CAACC,SAAS,WAE/B,uBACEP,UAAU,WACVH,KAAK,4EACLO,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAcC,MAAO,CAACC,SAAS,WAEjC,uBACEP,UAAU,WACVH,KAAK,kCACLO,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAaC,MAAO,CAACC,SAAS,YAGhC,2BACE,yBAAKP,UAAU,QAAQC,IAAI,yGAAyGO,MAAM,cAAcC,IAAI,eAAeC,OAAO,OAEpL,kBAAC,EAAD,SCrCYC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BvD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.267fe733.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/yay.c22994dd.mp3\";","import * as React from 'react';\r\nimport Konami from 'react-konami-code';\r\nimport Confetti from 'react-confetti'\r\nimport yay from \"./yay.mp3\"\r\nimport Sound from \"react-sound\"\r\n\r\n\r\nconst width = window.innerWidth\r\nconst height = window.innerHeight\r\n\r\nclass MyKonami extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      yaystatus:Sound.status.STOP\r\n    };\r\n  }\r\n\r\n  easterEgg = () => {\r\n    this.setState(\r\n      { yaystatus:Sound.status.PLAYING }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Konami action={this.easterEgg}>\r\n        <Sound\r\n          url={yay}\r\n          playStatus={this.state.yaystatus}\r\n          playFromPosition={1000 /* in milliseconds */}\r\n        />\r\n        <Confetti\r\n          width={width}\r\n          height={height}\r\n        />\r\n        <a href=\"https://github.com/altaga/altaga.github.io\">Webpage Source Code</a>\r\n      </Konami>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyKonami","import React from 'react';\nimport logo from './img.svg';\nimport './App.css';\nimport MyKonami from './mykonami'\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport TwitterIcon from '@material-ui/icons/Twitter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"myTittle\">\n          Hello, I'm Altaga!\n        </div>\n        <div className=\"myText\">\n          Full Stack Dev | Hacker | Maker \n        </div>\n        <p />\n        <div className=\"block\">\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/altaga\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <GitHubIcon style={{fontSize:\"60px\"}} />\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://www.linkedin.com/in/victor-alonso-altamirano-izquierdo-311437137/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <LinkedInIcon style={{fontSize:\"80px\"}} />\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://twitter.com/Victor_Alta\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <TwitterIcon style={{fontSize:\"80px\"}} />\n        </a>\n        </div>\n        <p >\n          <img className=\"Image\" src=\"https://hitwebcounter.com/counter/counter.php?page=7547790&style=0024&nbdigits=6&type=page&initCount=0\" title=\"Web Counter\" Alt=\"counter free\" border=\"0\" />\n        </p>\n        <MyKonami />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.c4051912.svg\";"],"sourceRoot":""}